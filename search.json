[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 DataTK authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/Standard.html","id":"names","dir":"Articles","previous_headings":"Variables","what":"Names","title":"Standard","text":"Variable names must written according camelCase convention. .e. entirely lower case except first letters second subsequent words. name variable try put extension separated dot. extension informs object class variable. extension must written entirely lower case must abbreviation. variables several possible object classes, separate extensions underscore.","code":""},{"path":"/articles/Standard.html","id":"extensions","dir":"Articles","previous_headings":"Variables","what":"Extensions","title":"Standard","text":".chr <character> … .pth <character> File path .dir <character> Directory path .num <numeric> … .int <numeric> Integer .ndx <numeric> Position Number .tim <numeric> Time .fac <factor> Factor .idn <factor character numeric> Identifier (unique) .lgk <logical function> Logical expression .bln <logical> Boolean .fun <function> Function .<> .lst <list> … .nst <list> Nested List .{*}_vec <*> Vector specific class .{*}_lst <list> list specific class .dtf <data.frame> … .tbl <tibble> … .mtx <matrix> … .spm <dgCMatrix dgRMatrix Matrix format> Sparse matrix .gnr <GRanges> … .gnp <Pairs> GeNomic ranges Pairs .gni <GInteractions> GeNomic Interactions .cmx <ContactMatrix> Contact Matrix .ggp <gg ggplot> ggplot object .col <character numeric list> color format","code":""},{"path":"/articles/Standard.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Standard","text":"Functions names must written according camelCase convention. .e. entirely lower case except first letters words. name function action, verb question.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Chanard. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chanard N (2022). DataTK: Set Data Manipulation Tools. R package version 0.1.0.","code":"@Manual{,   title = {DataTK: Set of Data Manipulation Tools},   author = {Nicolas Chanard},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"datatk-","dir":"","previous_headings":"","what":"Set of Data Manipulation Tools","title":"Set of Data Manipulation Tools","text":"DataTK set data manipulation tools.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Set of Data Manipulation Tools","text":"can install development version DataTK GitHub :","code":"devtools::install_github(\"NChanard/DataTK\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Set of Data Manipulation Tools","text":"DataTK","code":""},{"path":"/reference/BindFillRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind data frames after filling missing columns. — BindFillRows","title":"Bind data frames after filling missing columns. — BindFillRows","text":"Bind data frames rows filling missing columns NA.","code":""},{"path":"/reference/BindFillRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind data frames after filling missing columns. — BindFillRows","text":"","code":"BindFillRows(data.lst_df, ...)"},{"path":"/reference/BindFillRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind data frames after filling missing columns. — BindFillRows","text":"data.lst_df <data.frames list[data.frame]>: data frames bind list data.frames. data.frame create list arguments `data.lst_df` `...`, else `...` ignored. ... <data.frames list[data.frame]>: data frames bind list data.frames.","code":""},{"path":"/reference/BindFillRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind data frames after filling missing columns. — BindFillRows","text":"binded data frame","code":""},{"path":"/reference/BindFillRows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind data frames after filling missing columns. — BindFillRows","text":"BindFillRows","code":""},{"path":"/reference/BindFillRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind data frames after filling missing columns. — BindFillRows","text":"","code":"df1 <- data.frame(a = c(1:5), b = c(6:10)) df2 <- data.frame(a = c(11:15), b = c(16:20), c = LETTERS[1:5]) BindFillRows(df1,df2) #>     a  b    c #> 1   1  6 <NA> #> 2   2  7 <NA> #> 3   3  8 <NA> #> 4   4  9 <NA> #> 5   5 10 <NA> #> 6  11 16    A #> 7  12 17    B #> 8  13 18    C #> 9  14 19    D #> 10 15 20    E BindFillRows(list(df1,df2)) #>     a  b    c #> 1   1  6 <NA> #> 2   2  7 <NA> #> 3   3  8 <NA> #> 4   4  9 <NA> #> 5   5 10 <NA> #> 6  11 16    A #> 7  12 17    B #> 8  13 18    C #> 9  14 19    D #> 10 15 20    E"},{"path":"/reference/MeltSpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce matrix in tibble. — MeltSpm","title":"Coerce matrix in tibble. — MeltSpm","text":"Coerce sparse matrix M tibble columns: row index, j column index x value M[,j].","code":""},{"path":"/reference/MeltSpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce matrix in tibble. — MeltSpm","text":"","code":"MeltSpm(mat.spm = NULL)"},{"path":"/reference/MeltSpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce matrix in tibble. — MeltSpm","text":"mat.spm <dgCMatrix dgCMatrix coercible>: matrix.","code":""},{"path":"/reference/MeltSpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce matrix in tibble. — MeltSpm","text":"tibble.","code":""},{"path":"/reference/MeltSpm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce matrix in tibble. — MeltSpm","text":"MeltSpm","code":""},{"path":"/reference/MeltSpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce matrix in tibble. — MeltSpm","text":"","code":"i=c(1,1,2,2,3,3,4,4,4,4) j=c(1,4,2,5,1,4,2,3,4,5) x=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) mat.spm = Matrix::sparseMatrix(i=i, j=j, x=x, dims=c(5,5)) mat.spm #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                 #> [1,] 1 . . 2  . #> [2,] . 3 . .  4 #> [3,] 5 . . 6  . #> [4,] . 7 8 9 10 #> [5,] . . . .  . meltedMat.tbl <- MeltSpm(mat.spm) meltedMat.tbl[order(meltedMat.tbl$i),] #> # A tibble: 10 × 3 #>        i     j     x #>    <int> <int> <dbl> #>  1     1     1     1 #>  2     1     4     2 #>  3     2     2     3 #>  4     2     5     4 #>  5     3     1     5 #>  6     3     4     6 #>  7     4     2     7 #>  8     4     3     8 #>  9     4     4     9 #> 10     4     5    10"},{"path":"/reference/PadMtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a value around a matrix. — PadMtx","title":"Add a value around a matrix. — PadMtx","text":"Add value around matrix.","code":""},{"path":"/reference/PadMtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a value around a matrix. — PadMtx","text":"","code":"PadMtx(   mat.mtx = NULL,   padSize.num = 1,   value.num = 0,   side.chr = c(\"top\", \"bot\", \"right\", \"left\") )"},{"path":"/reference/PadMtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a value around a matrix. — PadMtx","text":"mat.mtx <matrix>: numerical matrix. padSize.num <numeric>: number columns rows add. (Default 1) value.num <numeric>: value add. Null create mirror choosen sides. (Default 0) side.chr <character>: side pad, must one 'top','bot','right' 'left'. (Default c('top','bot','right','left') )","code":""},{"path":"/reference/PadMtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a value around a matrix. — PadMtx","text":"matrix.","code":""},{"path":"/reference/PadMtx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a value around a matrix. — PadMtx","text":"PadMtx","code":""},{"path":"/reference/PadMtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a value around a matrix. — PadMtx","text":"","code":"mat.mtx = matrix(1:25,5,5) PadMtx(mat.mtx=mat.mtx,  padSize.num=1, value.num=0, side.chr=c('top','bot','right','left') ) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0    0    0    0    0    0    0 #> [2,]    0    1    6   11   16   21    0 #> [3,]    0    2    7   12   17   22    0 #> [4,]    0    3    8   13   18   23    0 #> [5,]    0    4    9   14   19   24    0 #> [6,]    0    5   10   15   20   25    0 #> [7,]    0    0    0    0    0    0    0 PadMtx(mat.mtx=mat.mtx,  padSize.num=1, value.num=NULL, side.chr=c('top','bot','right','left') ) #>         col.pad               col.pad #> row.pad       1 1  6 11 16 21      21 #>               1 1  6 11 16 21      21 #>               2 2  7 12 17 22      22 #>               3 3  8 13 18 23      23 #>               4 4  9 14 19 24      24 #>               5 5 10 15 20 25      25 #> row.pad       5 5 10 15 20 25      25 PadMtx(mat.mtx=mat.mtx,  padSize.num=1, value.num=0, side.chr=c('right','left') ) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0    1    6   11   16   21    0 #> [2,]    0    2    7   12   17   22    0 #> [3,]    0    3    8   13   18   23    0 #> [4,]    0    4    9   14   19   24    0 #> [5,]    0    5   10   15   20   25    0 PadMtx(mat.mtx=mat.mtx,  padSize.num=1, value.num=0, side.chr=c('top') ) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    6   11   16   21 #> [3,]    2    7   12   17   22 #> [4,]    3    8   13   18   23 #> [5,]    4    9   14   19   24 #> [6,]    5   10   15   20   25"},{"path":"/reference/ReduceRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over two RLE — ReduceRun","title":"Apply a function over two RLE — ReduceRun","text":"Apply function values two RLE return one RLE.","code":""},{"path":"/reference/ReduceRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over two RLE — ReduceRun","text":"","code":"ReduceRun(first.rle, second.rle, reduceFun.chr = \"paste\", ...)"},{"path":"/reference/ReduceRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over two RLE — ReduceRun","text":"first.rle <rle Rle>: first rle. second.rle <rle Rle>>: second rle. reduceFun.chr <character>: name function apply e.g paste, sum, mean. ... <...>: parameter reduce function.","code":""},{"path":"/reference/ReduceRun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over two RLE — ReduceRun","text":"reduced Rle","code":""},{"path":"/reference/ReduceRun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function over two RLE — ReduceRun","text":"ReduceRun","code":""},{"path":"/reference/ReduceRun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over two RLE — ReduceRun","text":"","code":"first.rle = rle(c(\"A\",\"A\",\"B\")) second.rle = rle(c(\"A\",\"B\",\"B\")) ReduceRun(first.rle=first.rle, second.rle=second.rle, reduceFun.chr=\"paste\", sep=\"_\" ) #> character-Rle of length 3 with 3 runs #>   Lengths:     1     1     1 #>   Values : \"A_A\" \"A_B\" \"B_B\" first.rle = S4Vectors::Rle(c(1,2,3)) second.rle = S4Vectors::Rle(c(5,5,5)) ReduceRun(first.rle=first.rle, second.rle=second.rle, reduceFun.chr=\"sum\") #> numeric-Rle of length 3 with 3 runs #>   Lengths: 1 1 1 #>   Values : 6 7 8"},{"path":"/reference/ResizeMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Resize a matrix — ResizeMatrix","title":"Resize a matrix — ResizeMatrix","text":"Resize numericam matrix new dimension.","code":""},{"path":"/reference/ResizeMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resize a matrix — ResizeMatrix","text":"","code":"ResizeMatrix(matrice.mtx, newDim.num = dim(matrice.mtx))"},{"path":"/reference/ResizeMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resize a matrix — ResizeMatrix","text":"matrice.mtx <matrix>:  numericam matrix resize. newDim.num <integer>: number rows cols resized matrix.","code":""},{"path":"/reference/ResizeMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resize a matrix — ResizeMatrix","text":"resized matrix.","code":""},{"path":"/reference/ResizeMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resize a matrix — ResizeMatrix","text":"ResizeMatrix","code":""},{"path":"/reference/ResizeMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resize a matrix — ResizeMatrix","text":"","code":"matrice.mtx <- matrix(0,11,11) matrice.mtx[which(as.logical(1:(11*11)%%2))] <- 1:ceiling((11*11)/2) matrice.mtx[2,] <- 100 matrice.mtx[,7] <- 200 matrice.mtx #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] #>  [1,]    1    0   12    0   23    0  200    0   45     0    56 #>  [2,]  100  100  100  100  100  100  200  100  100   100   100 #>  [3,]    2    0   13    0   24    0  200    0   46     0    57 #>  [4,]    0    8    0   19    0   30  200   41    0    52     0 #>  [5,]    3    0   14    0   25    0  200    0   47     0    58 #>  [6,]    0    9    0   20    0   31  200   42    0    53     0 #>  [7,]    4    0   15    0   26    0  200    0   48     0    59 #>  [8,]    0   10    0   21    0   32  200   43    0    54     0 #>  [9,]    5    0   16    0   27    0  200    0   49     0    60 #> [10,]    0   11    0   22    0   33  200   44    0    55     0 #> [11,]    6    0   17    0   28    0  200    0   50     0    61 ResizeMatrix(matrice.mtx=matrice.mtx, newDim.num=c(7,7)) #>           [,1]      [,2]      [,3]     [,4]     [,5]     [,6]     [,7] #> [1,]  1.000000  8.000000  7.666667  0.00000 66.66667 30.00000 56.00000 #> [2,] 34.666667 39.111111 38.666667 33.33333 88.88889 53.77778 71.33333 #> [3,]  1.000000  4.888889 11.222222 20.00000 84.88889 22.00000 19.33333 #> [4,]  0.000000  3.000000 13.333333 31.00000 94.66667 17.66667  0.00000 #> [5,]  1.333333  5.555556 12.222222 21.33333 85.77778 22.66667 19.66667 #> [6,]  3.333333  8.333333 10.888889 11.00000 76.44444 27.88889 40.00000 #> [7,]  6.000000 11.333333  9.333333  0.00000 66.66667 33.33333 61.00000 ResizeMatrix(matrice.mtx=matrice.mtx, newDim.num=c(13,13)) #>            [,1]       [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #>  [1,]  1.000000  0.1666667  8.000000  6.000000  7.666667 19.166667  0.000000 #>  [2,] 83.500000 83.3611111 84.666667 84.333333 84.611111 86.527778 83.333333 #>  [3,] 34.666667 33.5555556 39.111111 37.666667 38.666667 46.666667 33.333333 #>  [4,]  1.000000  3.5000000  5.666667  8.000000 10.333333 12.500000 15.000000 #>  [5,]  1.000000  4.6111111  4.888889  8.666667 11.222222 10.277778 20.000000 #>  [6,]  2.500000  1.6666667  8.277778  7.500000  9.166667 18.222222  5.166667 #>  [7,]  0.000000  7.5000000  3.000000 10.000000 13.333333  5.166667 31.000000 #>  [8,]  3.333333  1.8055556  8.833333  7.916667  9.444444 18.916667  5.166667 #>  [9,]  1.333333  5.7777778  5.555556  9.500000 12.222222 10.777778 21.333333 #> [10,]  2.500000  4.5833333  7.000000  9.250000 11.500000 13.916667 16.000000 #> [11,]  3.333333  3.6111111  8.333333  9.000000 10.888889 16.833333 11.000000 #> [12,]  1.000000  7.8055556  4.944444 10.583333 13.777778  8.472222 27.500000 #> [13,]  6.000000  1.0000000 11.333333  8.500000  9.333333 23.333333  0.000000 #>           [,8]      [,9]    [,10]    [,11]     [,12]    [,13] #>  [1,] 166.6667  66.66667 22.50000 30.00000  9.333333 56.00000 #>  [2,] 180.5556 122.22222 87.08333 88.33333 84.888889 92.66667 #>  [3,] 172.2222  88.88889 48.66667 53.77778 39.666667 71.33333 #>  [4,] 169.1667  80.33333 21.75000 24.00000 26.416667 28.50000 #>  [5,] 170.0000  84.88889 21.50000 22.00000 32.111111 19.33333 #>  [6,] 167.5278  71.33333 23.08333 29.05556 15.416667 48.33333 #>  [7,] 171.8333  94.66667 21.00000 17.66667 44.166667  0.00000 #>  [8,] 167.5278  71.33333 23.50000 29.61111 15.555556 49.16667 #>  [9,] 170.2222  85.77778 22.33333 22.66667 33.277778 19.66667 #> [10,] 169.3333  81.00000 23.00000 25.33333 27.500000 30.00000 #> [11,] 168.5000  76.44444 23.66667 27.88889 21.944444 40.00000 #> [12,] 171.2500  91.11111 22.50000 20.83333 39.888889 10.16667 #> [13,] 166.6667  66.66667 25.00000 33.33333 10.166667 61.00000"},{"path":"/reference/Rise0.html","id":null,"dir":"Reference","previous_headings":"","what":"Explicit zeros in sparse matrix. — Rise0","title":"Explicit zeros in sparse matrix. — Rise0","text":"Explicit implicit zeros sparse matrix.","code":""},{"path":"/reference/Rise0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explicit zeros in sparse matrix. — Rise0","text":"","code":"Rise0(mat.spm = NULL, which.ndx = NULL, coord.dtf = NULL)"},{"path":"/reference/Rise0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explicit zeros in sparse matrix. — Rise0","text":"mat.spm <dgCMatrix dgCMatrix coercible>: sparse matrix. .ndx <numeric> vector positions zeros explicits (column driven). NULL coord.dtf NULL zeros explicits. (Default NULL) coord.dtf <data.frame> coordinate data frame zeros explicit Row index fisrt column, columns index second columns. NULL .ndx parameter used (Default NULL)","code":""},{"path":"/reference/Rise0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explicit zeros in sparse matrix. — Rise0","text":"Sparse matrix explicit zeros.","code":""},{"path":"/reference/Rise0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explicit zeros in sparse matrix. — Rise0","text":"Rise0","code":""},{"path":"/reference/Rise0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explicit zeros in sparse matrix. — Rise0","text":"","code":"set.seed(123) mat.spm = as(matrix(floor(runif(7*13,0,2)),7,13), \"dgCMatrix\") mat.spm #> 7 x 13 sparse Matrix of class \"dgCMatrix\" #>                                #> [1,] . 1 . 1 . . . 1 . . 1 1 . #> [2,] 1 1 1 1 . 1 . . 1 1 1 . . #> [3,] . . . 1 1 . . . 1 . 1 . 1 #> [4,] 1 1 . 1 1 . . 1 . 1 . . 1 #> [5,] 1 . . 1 1 . . . 1 1 . 1 1 #> [6,] . 1 1 1 1 . . 1 . 1 . . . #> [7,] 1 1 1 1 . . . . . . . 1 . Rise0(mat.spm=mat.spm, which.ndx=c(1,3,6,10,12)) #> 7 x 13 sparse Matrix of class \"dgCMatrix\" #>                                #> [1,] 0 1 . 1 . . . 1 . . 1 1 . #> [2,] 1 1 1 1 . 1 . . 1 1 1 . . #> [3,] 0 0 . 1 1 . . . 1 . 1 . 1 #> [4,] 1 1 . 1 1 . . 1 . 1 . . 1 #> [5,] 1 0 . 1 1 . . . 1 1 . 1 1 #> [6,] 0 1 1 1 1 . . 1 . 1 . . . #> [7,] 1 1 1 1 . . . . . . . 1 . Rise0(mat.spm=mat.spm, coord.dtf=data.frame(i=c(1,5,3),  j=c(1,2,3) ) ) #> 7 x 13 sparse Matrix of class \"dgCMatrix\" #>                                #> [1,] 0 1 . 1 . . . 1 . . 1 1 . #> [2,] 1 1 1 1 . 1 . . 1 1 1 . . #> [3,] . . 0 1 1 . . . 1 . 1 . 1 #> [4,] 1 1 . 1 1 . . 1 . 1 . . 1 #> [5,] 1 0 . 1 1 . . . 1 1 . 1 1 #> [6,] . 1 1 1 1 . . 1 . 1 . . . #> [7,] 1 1 1 1 . . . . . . . 1 . Rise0(mat.spm=mat.spm) #> 7 x 13 sparse Matrix of class \"dgCMatrix\" #>                                #> [1,] 0 1 0 1 0 0 0 1 0 0 1 1 0 #> [2,] 1 1 1 1 0 1 0 0 1 1 1 0 0 #> [3,] 0 0 0 1 1 0 0 0 1 0 1 0 1 #> [4,] 1 1 0 1 1 0 0 1 0 1 0 0 1 #> [5,] 1 0 0 1 1 0 0 0 1 1 0 1 1 #> [6,] 0 1 1 1 1 0 0 1 0 1 0 0 0 #> [7,] 1 1 1 1 0 0 0 0 0 0 0 1 0"},{"path":"/reference/TransposeList.html","id":null,"dir":"Reference","previous_headings":"","what":"Turns a nested list ","title":"Turns a nested list ","text":"Turns nested list \"inside-\".","code":""},{"path":"/reference/TransposeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turns a nested list ","text":"","code":"TransposeList(var.nlst)"},{"path":"/reference/TransposeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turns a nested list ","text":"var.nlst <list[list]>: nested list transpose.","code":""},{"path":"/reference/TransposeList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turns a nested list ","text":"tranposed nested list.","code":""},{"path":"/reference/TransposeList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turns a nested list ","text":"TransposeList","code":""},{"path":"/reference/TransposeList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turns a nested list ","text":"","code":"my_lst <- list(     first=list(\"A1\",\"B1\",\"C1\"),     second=list(\"A2\",\"B2\"),     third=list(NULL,\"B3\") ) TransposeList(my_lst) #> [[1]] #>  first second  #>   \"A1\"   \"A2\"  #>  #> [[2]] #>  first second  third  #>   \"B1\"   \"B2\"   \"B3\"  #>  #> [[3]] #> first  #>  \"C1\"  #>"},{"path":"/reference/WrapFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a string into a function. — WrapFunction","title":"Wrap a string into a function. — WrapFunction","text":"Wrap string function.","code":""},{"path":"/reference/WrapFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a string into a function. — WrapFunction","text":"","code":"WrapFunction(...)"},{"path":"/reference/WrapFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a string into a function. — WrapFunction","text":"... <character>: String parse eval function.","code":""},{"path":"/reference/WrapFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a string into a function. — WrapFunction","text":"result function function.","code":""},{"path":"/reference/WrapFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrap a string into a function. — WrapFunction","text":"WrapFunction","code":""},{"path":"/reference/WrapFunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap a string into a function. — WrapFunction","text":"","code":"X <- c(2,4,NA) myString <- \"mean(X, na.rm=TRUE)\" WrapFunction(myString) #> Error in mean(X, na.rm = TRUE): object 'X' not found myResult <- WrapFunction(myString) #> Error in mean(X, na.rm = TRUE): object 'X' not found myString_2 <- \"function(X){mean(X, na.rm=TRUE)}\" WrapFunction(myString_2) #> function (X)  #> { #>     mean(X, na.rm = TRUE) #> } #> <environment: 0x556df737cf58> myFunction <- WrapFunction(myString_2) myFunction(c(1,2,3)) #> [1] 2"}]
